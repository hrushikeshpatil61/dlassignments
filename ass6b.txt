from tensorflow.keras.preprocessing.image import load_img
from tensorflow.keras.preprocessing.image import img_to_array
from keras.applications.vgg16 import VGG16
from keras.applications.vgg16 import preprocess_input
from keras.applications.vgg16 import decode_predictions
import numpy as np



image = load_img('car.jpg', target_size=(224, 224))


image = img_to_array(image)



image.shape



reshaped_img = image.reshape(1, 224, 224, 3)



reshaped_img.shape


preprocessed_img = preprocess_input(reshaped_img)



model = VGG16()


preProcessedResult = model.predict(preprocessed_img)


# np.argmax(rawImageResult)


np.argmax(preProcessedResult)



# decode_predictions(rawImageResult)



decode_predictions(preProcessedResult)



def create_input(images):
    inputs = []
    for img_name in images:
        image = load_img(img_name, target_size=(224, 224))
        image = img_to_array(image)
        preprocessed_img = preprocess_input(image)
        inputs.append(preprocessed_img)
    return np.array(inputs)


images = ['download.jpg', 'car.jpeg', 'panda.jpeg', 'girraffe.jpg', 'dog.jpeg']



input_vector = create_input(images)


input_vector.shape


y_pred = model.predict(input_vector)


y_pred.shape


decode_predictions(y_pred)
























